class Game {
	field Character character;
	//field Enemy enemy;
	// TODO: implement a linked list for the enemies so dead enemies can be deleted
	field Array enemies;
	field int numEnemies;
	field int arraySize;
	static int difficulty;

	static int time;

	// Creates a game with the character and one enemy
	constructor Game new() {		
		// 255, 254, 10
		let time = 50;
		let character = Character.new(255, 254,10,5);
		let arraySize = 4;
		let numEnemies = 0;
		if (difficulty = 0) {
			let difficulty = 5;
		}
		let enemies = Array.new(arraySize);
		do addEnemy();
		do Sys.wait(300);
		return this;
	}

	method void dispose() {
		var int i;
		var Enemy enemy;
		let i = 0;
		do character.dispose();
		while (i<numEnemies) {
			let enemy = enemies[i];
			do enemy.dispose();
			let i = i + 1;
		}
		do enemies.dispose();
		do Memory.deAlloc(this);
		return;
	}

	method Character run() {
		var char key;
		var boolean exit;
		var int i;
		var int j;
		var Enemy enemy;
		let exit = false;

		while (~exit) {
			// Wait for input			
			while (key = 0) {
				let key = Keyboard.keyPressed();
				if (moveEnemies()) {
					return character;
				}
			
				do spawnEnemies();
				do character.blink();
				do Sys.wait(time);
			}
			// Press 'Q' to quit
			if (key = 81) {
				return character;
			}
			// Press 'H' for hard mode
			if (key = 72) {
				do Enemy.changeHardMode();
			}
			// 'A' to increase difficulty
			if (key = 65) {
				if (difficulty > 1) {
					let difficulty = difficulty - 1;
				}
			}
			// 'Z' to decrease difficulty
			if (key = 90) {
				if (difficulty < 20 ) {
					let difficulty = difficulty + 1;
				}
			}
			// Moving left and right
			if (key = 130) {
				do character.moveLeft();
			}
			if (key = 132) {
				do character.moveRight();
			}
			// Up arrow to jump.  Coordinates with the movement of enemies
			if (key = 131) {
				//do character.jump();			
				let j = 0;
				while (j < 10) {
					do character.moveUp();
					let j = j + 1;
			
					let key = Keyboard.keyPressed();
					if (key = 130) {
						do character.moveLeft();
					}
					if (key = 132) {
						do character.moveRight();
					}
					if (Game.mod(j,2) = 0) {
						if (moveEnemies()) {
							return character;
						}
					}
					
					do spawnEnemies();	
					do Sys.wait(time/2);
				} 


		    if(Random.between(0,3) = 1)
		    {
		     
		      do Output.printString("Freeze Frame!");
		      let i = 0;
		      while(i < 5)
		      { 
              do character.draw(5);
              do Sys.wait(300);
              let i = i + 1;
		      }
		      let i = 0;
		      while(i < 14)
		      { 
		        do Output.backSpace();
		        let i = i + 1; 
		      }
		      do Output.printString("               ");
				  let i = 0;
				  while(i < 14)
		      { 
		        do Output.backSpace();
		        let i = i + 1;
		      }
		    }

				while (j > 0) {
					do character.moveDown();
					let j = j - 1;
					
					let key = Keyboard.keyPressed();
					if (key = 130) {
						do character.moveLeft();
					}
					if (key = 132) {
						do character.moveRight();
					}
					if (Game.mod(j,2) = 0) {
						if (moveEnemies()) {
							return character;
						}
					}
					
					do spawnEnemies();
					do Sys.wait(time/2);
				}
			}
			do Sys.wait(time);
			let key = Keyboard.keyPressed();
			if (moveEnemies()) {
				return character;
			}
			
			do spawnEnemies();		
		}
		return character;
	}

	// Iterates through the array of enemies, moving them 
	method bool moveEnemies() {
		var int i;
		var Enemy enemy;
		let i = 0;
		while (i < numEnemies) {
			let enemy = enemies[i];
			if (enemy.move()) {
				return true;
			}
			let i = i + 1;
		}
		return false;
	}
	// Returns a mod b, assuming a and b are both >= 0
	function int mod(int a, int b) {
		while (~(a < b)) {
			let a = a - b;
		}
		return a;
	}

	// Adds one new enemy to the game
	method void addEnemy() {
		var Enemy enemy;
		var Array temp;
		var int i;
		let enemy = Enemy.new(500, 244, 10, 3 + (Enemy.getDeaths()/difficulty), character);
		let numEnemies = numEnemies + 1;
		// Double the size of the array if necessary
		if (~(numEnemies < arraySize)) {

			let arraySize = Math.multiply(arraySize, 2);
			let temp = Array.new(arraySize);
			// Copy over the elements
			let i = 0;
			while (i < numEnemies) {
				let temp[i] = enemies[i];
				let i = i + 1;
			}

			do enemies.dispose();
			let enemies = temp;
		}

		let enemies[numEnemies-1] = enemy;
		return;
	}

	// Determines whether or not an enemy will be added
	method void spawnEnemies() {
		// Change back to 16
		if (Game.mod(Random.next(), 12 + (difficulty/2)) = 0) {
			do addEnemy();
		}	
		return;
	}

}
