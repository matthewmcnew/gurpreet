class Enemy {
	// Location on the screen
	field int x, y;
	
	field int size;
	field int stepSize;

	field Character character;
	static bool hardMode;

	// Decides what direction to go: 0 is left, 1 is right
	field int direction;

	// The number of enemies killed
	static int deaths;
	constructor Enemy new(int Ax, int Ay, int Asize, int AstepSize, Character Acharacter) {
		let size = Asize;
		let stepSize = AstepSize;
		let direction = 0;

		let x = Ax;
		let y = Ay;
		let character = Acharacter;

		do draw();
		return this;
	}	

	method void dispose() {
		//do erase();
		do Memory.deAlloc(this);
		return;
	}

	// Moves the enemy, returns whether or not the enemy has collided with the player
	method boolean move() {
		// Handle dead enemies
		if (~(y=244)) {
			// It's only worth drawing if you kill enough to get down there
			// but there's a stack overflow around there anyways
			//do draw();
			return false;
		}
		if (~((x-stepSize) > 1)) {
			let direction = 1;
		}
		if (~((x+size) < 510)) {
			let direction = 0;
		}

		if (direction = 0) {
			do moveLeft();
		}
		if (direction = 1) {
			do moveRight();
		}
		
		return collision();
	}

	// Determines if there was a collision: returns true if the character dies, false otherwise
	// Also, kills the enemy if the collision was from above
	method boolean collision() {
		var int characterLeft;
		var int characterRight;
		var int characterBottom;


		let characterLeft = character.getX();
		let characterRight = character.getX() + character.getRad() + character.getRad();
		let characterBottom = character.getY() + character.getRad() + character.getRad();

		if (((x + size) > characterLeft) & (x < characterRight)) {
			if(~(y > characterBottom)) {
				// 251, 132
				do Output.moveCursor(8,19);
				do Output.printString("You died after ");
				do Output.printInt(deaths);
				do Output.printString(" kills!");
				do Sys.wait(1000);
				do Output.println();
				
				return true;
			}
			if (~((y - size - 5) > characterBottom)) {
				do die();
				return false;
			}
		}
		
		return false;
	}

	method void draw() {
		do Screen.setColor(true);
		do Screen.drawRectangle(x,y,x+size,y+size);
		return;
	}

	method void erase() {
		do Screen.setColor(false);
		do Screen.drawRectangle(x,y,x+size,y+size);
		return;
	}

	method void moveLeft() {
		if (x > 1) {
			do erase();
			let x = x - stepSize;
			do draw();
		}
		return;
	}

	method void moveRight() {
		if ((x + size) < 510) {
			do erase();
			let x = x + stepSize;
			do draw();
		}
		return;
	}
	
	// TODO: If you kill enough enemies make it print them on a new line instead
	method void die() {
		var int xpos;
		do erase();
		let size = 6;
		let xpos = Math.multiply(deaths, size+2);
		let x = Game.mod(xpos,512-size);
		let y = (size+2) * (xpos/(512-size));
		let stepSize = 0;
		let deaths = deaths + 1;
		do draw();
		// Uncommenting this line does weird (possible cool) stuff
		if(hardMode) {
			do dispose();
		} 

		return;
	}

	function void resetDeaths() {
		let deaths = 0;
		return;
	}

	function int getDeaths() {
		return deaths;
	}


	function void changeHardMode() {
		let hardMode = ~hardMode;
		return;
	}
}

